package;

import three.constants.Constants;
import three.core.AssignNode;
import three.core.AttributeNode;
import three.core.BypassNode;
import three.core.CacheNode;
import three.core.ConstNode;
import three.core.ContextNode;
import three.core.IndexNode;
import three.core.LightingModel;
import three.core.Node;
import three.core.NodeAttribute;
import three.core.NodeBuilder;
import three.core.NodeCache;
import three.core.NodeCode;
import three.core.NodeFrame;
import three.core.NodeFunctionInput;
import three.core.NodeKeywords;
import three.core.NodeUniform;
import three.core.NodeVar;
import three.core.NodeVarying;
import three.core.ParameterNode;
import three.core.PropertyNode;
import three.core.StackNode;
import three.core.TempNode;
import three.core.UniformGroupNode;
import three.core.UniformNode;
import three.core.VaryingNode;
import three.core.OutputStructNode;
import three.core.NodeUtils;
import three.math.MathNode;
import three.math.OperatorNode;
import three.math.CondNode;
import three.math.HashNode;
import three.math.MathUtils;
import three.math.TriNoise3D;
import three.utils.ArrayElementNode;
import three.utils.ConvertNode;
import three.utils.DiscardNode;
import three.utils.EquirectUVNode;
import three.utils.FunctionOverloadingNode;
import three.utils.JoinNode;
import three.utils.LoopNode;
import three.utils.MatcapUVNode;
import three.utils.MaxMipLevelNode;
import three.utils.OscNode;
import three.utils.PackingNode;
import three.utils.RemapNode;
import three.utils.RotateUVNode;
import three.utils.RotateNode;
import three.utils.SetNode;
import three.utils.SplitNode;
import three.utils.SpriteSheetUVNode;
import three.utils.StorageArrayElementNode;
import three.utils.TimerNode;
import three.utils.TriplanarTexturesNode;
import three.utils.ReflectorNode;
import three.shadernode.ShaderNode;
import three.accessors.AccessorsUtils;
import three.accessors.UniformsNode;
import three.accessors.BitangentNode;
import three.accessors.BufferAttributeNode;
import three.accessors.BufferNode;
import three.accessors.CameraNode;
import three.accessors.VertexColorNode;
import three.accessors.CubeTextureNode;
import three.accessors.InstanceNode;
import three.accessors.BatchNode;
import three.accessors.MaterialNode;
import three.accessors.MaterialReferenceNode;
import three.accessors.RendererReferenceNode;
import three.accessors.MorphNode;
import three.accessors.TextureBicubicNode;
import three.accessors.ModelNode;
import three.accessors.ModelViewProjectionNode;
import three.accessors.NormalNode;
import three.accessors.Object3DNode;
import three.accessors.PointUVNode;
import three.accessors.PositionNode;
import three.accessors.ReferenceNode;
import three.accessors.ReflectVectorNode;
import three.accessors.SkinningNode;
import three.accessors.SceneNode;
import three.accessors.StorageBufferNode;
import three.accessors.TangentNode;
import three.accessors.TextureNode;
import three.accessors.TextureStoreNode;
import three.accessors.UVNode;
import three.accessors.UserDataNode;
import three.display.BlendModeNode;
import three.display.BumpMapNode;
import three.display.ColorAdjustmentNode;
import three.display.ColorSpaceNode;
import three.display.FrontFacingNode;
import three.display.NormalMapNode;
import three.display.PosterizeNode;
import three.display.ToneMappingNode;
import three.display.ViewportNode;
import three.display.ViewportTextureNode;
import three.display.ViewportSharedTextureNode;
import three.display.ViewportDepthTextureNode;
import three.display.ViewportDepthNode;
import three.display.GaussianBlurNode;
import three.display.AfterImageNode;
import three.display.AnamorphicNode;
import three.display.PassNode;
import three.code.ExpressionNode;
import three.code.CodeNode;
import three.code.FunctionCallNode;
import three.code.FunctionNode;
import three.code.ScriptableNode;
import three.code.ScriptableValueNode;
import three.fog.FogNode;
import three.fog.FogRangeNode;
import three.fog.FogExp2Node;
import three.geometry.RangeNode;
import three.gpgpu.ComputeNode;
import three.lighting.LightNode;
import three.lighting.PointLightNode;
import three.lighting.DirectionalLightNode;
import three.lighting.SpotLightNode;
import three.lighting.IESSpotLightNode;
import three.lighting.AmbientLightNode;
import three.lighting.LightsNode;
import three.lighting.LightingNode;
import three.lighting.LightingContextNode;
import three.lighting.HemisphereLightNode;
import three.lighting.EnvironmentNode;
import three.lighting.IrradianceNode;
import three.lighting.AONode;
import three.lighting.AnalyticLightNode;
import three.pmrem.PMREMNode;
import three.pmrem.PMREMUtils;
import three.procedural.CheckerNode;
import three.loaders.NodeLoader;
import three.loaders.NodeObjectLoader;
import three.loaders.NodeMaterialLoader;
import three.parsers.GLSLNodeParser;
import three.materials.Materials;
import three.materialx.MaterialXNodes;
import three.functions.BSDF.BRDF_GGX;
import three.functions.BSDF.BRDF_Lambert;
import three.functions.BSDF.D_GGX;
import three.functions.BSDF.DFGApprox;
import three.functions.BSDF.F_Schlick;
import three.functions.BSDF.Schlick_to_F0;
import three.functions.BSDF.V_GGX_SmithCorrelated;
import three.lighting.LightUtils;
import three.functions.material.GetGeometryRoughness;
import three.functions.material.GetRoughness;
import three.functions.PhongLightingModel;
import three.functions.PhysicalLightingModel;

@:expose
class ThreeNode {

	static public var assign:AssignNode = new AssignNode();
	static public var attribute:AttributeNode = new AttributeNode();
	static public var bypass:BypassNode = new BypassNode();
	static public var cache:CacheNode = new CacheNode();
	static public var context:ContextNode = new ContextNode();
	static public var label:ContextNode = new ContextNode();
	static public var vertexIndex:IndexNode = new IndexNode();
	static public var instanceIndex:IndexNode = new IndexNode();
	static public var parameter:ParameterNode = new ParameterNode();
	static public var property:PropertyNode = new PropertyNode();
	static public var varyingProperty:PropertyNode = new PropertyNode();
	static public var output:PropertyNode = new PropertyNode();
	static public var diffuseColor:PropertyNode = new PropertyNode();
	static public var roughness:PropertyNode = new PropertyNode();
	static public var metalness:PropertyNode = new PropertyNode();
	static public var clearcoat:PropertyNode = new PropertyNode();
	static public var clearcoatRoughness:PropertyNode = new PropertyNode();
	static public var sheen:PropertyNode = new PropertyNode();
	static public var sheenRoughness:PropertyNode = new PropertyNode();
	static public var iridescence:PropertyNode = new PropertyNode();
	static public var iridescenceIOR:PropertyNode = new PropertyNode();
	static public var iridescenceThickness:PropertyNode = new PropertyNode();
	static public var specularColor:PropertyNode = new PropertyNode();
	static public var shininess:PropertyNode = new PropertyNode();
	static public var dashSize:PropertyNode = new PropertyNode();
	static public var gapSize:PropertyNode = new PropertyNode();
	static public var pointWidth:PropertyNode = new PropertyNode();
	static public var alphaT:PropertyNode = new PropertyNode();
	static public var anisotropy:PropertyNode = new PropertyNode();
	static public var anisotropyB:PropertyNode = new PropertyNode();
	static public var anisotropyT:PropertyNode = new PropertyNode();
	static public var stack:StackNode = new StackNode();
	static public var temp:VarNode = new VarNode();
	static public var uniformGroup:UniformGroupNode = new UniformGroupNode();
	static public var objectGroup:UniformGroupNode = new UniformGroupNode();
	static public var renderGroup:UniformGroupNode = new UniformGroupNode();
	static public var frameGroup:UniformGroupNode = new UniformGroupNode();
	static public var uniform:UniformNode = new UniformNode();
	static public var varying:VaryingNode = new VaryingNode();
	static public var outputStruct:OutputStructNode = new OutputStructNode();
	static public var discard:DiscardNode = new DiscardNode();
	static public var equirectUV:EquirectUVNode = new EquirectUVNode();
	static public var overloadingFn:FunctionOverloadingNode = new FunctionOverloadingNode();
	static public var loop:LoopNode = new LoopNode();
	static public var Continue:LoopNode = new LoopNode();
	static public var Break:LoopNode = new LoopNode();
	static public var matcapUV:MatcapUVNode = new MatcapUVNode();
	static public var maxMipLevel:MaxMipLevelNode = new MaxMipLevelNode();
	static public var oscSine:OscNode = new OscNode();
	static public var oscSquare:OscNode = new OscNode();
	static public var oscTriangle:OscNode = new OscNode();
	static public var oscSawtooth:OscNode = new OscNode();
	static public var directionToColor:PackingNode = new PackingNode();
	static public var colorToDirection:PackingNode = new PackingNode();
	static public var remap:RemapNode = new RemapNode();
	static public var remapClamp:RemapNode = new RemapNode();
	static public var rotateUV:RotateUVNode = new RotateUVNode();
	static public var rotate:RotateNode = new RotateNode();
	static public var spritesheetUV:SpriteSheetUVNode = new SpriteSheetUVNode();
	static public var timerLocal:TimerNode = new TimerNode();
	static public var timerGlobal:TimerNode = new TimerNode();
	static public var timerDelta:TimerNode = new TimerNode();
	static public var frameId:TimerNode = new TimerNode();
	static public var triplanarTextures:TriplanarTexturesNode = new TriplanarTexturesNode();
	static public var triplanarTexture:TriplanarTexturesNode = new TriplanarTexturesNode();
	static public var reflector:ReflectorNode = new ReflectorNode();
	static public var expression:ExpressionNode = new ExpressionNode();
	static public var code:CodeNode = new CodeNode();
	static public var js:CodeNode = new CodeNode();
	static public var wgsl:CodeNode = new CodeNode();
	static public var glsl:CodeNode = new CodeNode();
	static public var call:FunctionCallNode = new FunctionCallNode();
	static public var wgslFn:FunctionNode = new FunctionNode();
	static public var glslFn:FunctionNode = new FunctionNode();
	static public var scriptable:ScriptableNode = new ScriptableNode();
	static public var global:ScriptableNode = new ScriptableNode();
	static public var scriptableValue:ScriptableValueNode = new ScriptableValueNode();
	static public var fog:FogNode = new FogNode();
	static public var rangeFog:FogRangeNode = new FogRangeNode();
	static public var densityFog:FogExp2Node = new FogExp2Node();
	static public var range:RangeNode = new RangeNode();
	static public var compute:ComputeNode = new ComputeNode();
	static public var lightTargetDirection:LightNode = new LightNode();
	static public var lightingContext:LightingContextNode = new LightingContextNode();
	static public var burn:BlendModeNode = new BlendModeNode();
	static public var dodge:BlendModeNode = new BlendModeNode();
	static public var overlay:BlendModeNode = new BlendModeNode();
	static public var screen:BlendModeNode = new BlendModeNode();
	static public var bumpMap:BumpMapNode = new BumpMapNode();
	static public var saturation:ColorAdjustmentNode = new ColorAdjustmentNode();
	static public var vibrance:ColorAdjustmentNode = new ColorAdjustmentNode();
	static public var hue:ColorAdjustmentNode = new ColorAdjustmentNode();
	static public var lumaCoeffs:ColorAdjustmentNode = new ColorAdjustmentNode();
	static public var luminance:ColorAdjustmentNode = new ColorAdjustmentNode();
	static public var threshold:ColorAdjustmentNode = new ColorAdjustmentNode();
	static public var linearToColorSpace:ColorSpaceNode = new ColorSpaceNode();
	static public var colorSpaceToLinear:ColorSpaceNode = new ColorSpaceNode();
	static public var linearTosRGB:ColorSpaceNode = new ColorSpaceNode();
	static public var sRGBToLinear:ColorSpaceNode = new ColorSpaceNode();
	static public var frontFacing:FrontFacingNode = new FrontFacingNode();
	static public var faceDirection:FrontFacingNode = new FrontFacingNode();
	static public var normalMap:NormalMapNode = new NormalMapNode();
	static public var posterize:PosterizeNode = new PosterizeNode();
	static public var toneMapping:ToneMappingNode = new ToneMappingNode();
	static public var viewport:ViewportNode = new ViewportNode();
	static public var viewportCoordinate:ViewportNode = new ViewportNode();
	static public var viewportResolution:ViewportNode = new ViewportNode();
	static public var viewportTopLeft:ViewportNode = new ViewportNode();
	static public var viewportBottomLeft:ViewportNode = new ViewportNode();
	static public var viewportTopRight:ViewportNode = new ViewportNode();
	static public var viewportBottomRight:ViewportNode = new ViewportNode();
	static public var viewportTexture:ViewportTextureNode = new ViewportTextureNode();
	static public var viewportMipTexture:ViewportTextureNode = new ViewportTextureNode();
	static public var viewportSharedTexture:ViewportSharedTextureNode = new ViewportSharedTextureNode();
	static public var viewportDepthTexture:ViewportDepthTextureNode = new ViewportDepthTextureNode();
	static public var viewZToOrthographicDepth:ViewportDepthNode = new ViewportDepthNode();
	static public var orthographicDepthToViewZ:ViewportDepthNode = new ViewportDepthNode();
	static public var viewZToPerspectiveDepth:ViewportDepthNode = new ViewportDepthNode();
	static public var perspectiveDepthToViewZ:ViewportDepthNode = new ViewportDepthNode();
	static public var depth:ViewportDepthNode = new ViewportDepthNode();
	static public var depthTexture:ViewportDepthNode = new ViewportDepthNode();
	static public var depthPixel:ViewportDepthNode = new ViewportDepthNode();
	static public var gaussianBlur:GaussianBlurNode = new GaussianBlurNode();
	static public var afterImage:AfterImageNode = new AfterImageNode();
	static public var anamorphic:AnamorphicNode = new AnamorphicNode();
	static public var pass:PassNode = new PassNode();
	static public var texturePass:PassNode = new PassNode();
	static public var depthPass:PassNode = new PassNode();
	static public var uniforms:UniformsNode = new UniformsNode();
	static public var bufferAttribute:BufferAttributeNode = new BufferAttributeNode();
	static public var dynamicBufferAttribute:BufferAttributeNode = new BufferAttributeNode();
	static public var instancedBufferAttribute:BufferAttributeNode = new BufferAttributeNode();
	static public var instancedDynamicBufferAttribute:BufferAttributeNode = new BufferAttributeNode();
	static public var buffer:BufferNode = new BufferNode();
	static public var cameraProjectionMatrix:CameraNode = new CameraNode();
	static public var cameraProjectionMatrixInverse:CameraNode = new CameraNode();
	static public var cameraViewMatrix:CameraNode = new CameraNode();
	static public var cameraNormalMatrix:CameraNode = new CameraNode();
	static public var cameraWorldMatrix:CameraNode = new CameraNode();
	static public var cameraPosition:CameraNode = new CameraNode();
	static public var cameraNear:CameraNode = new CameraNode();
	static public var cameraFar:CameraNode = new CameraNode();
	static public var cameraLogDepth:CameraNode = new CameraNode();
	static public var vertexColor:VertexColorNode = new VertexColorNode();
	static public var cubeTexture:CubeTextureNode = new CubeTextureNode();
	static public var instance:InstanceNode = new InstanceNode();
	static public var batch:BatchNode = new BatchNode();
	static public var materialAlphaTest:MaterialNode = new MaterialNode();
	static public var materialColor:MaterialNode = new MaterialNode();
	static public var materialShininess:MaterialNode = new MaterialNode();
	static public var materialEmissive:MaterialNode = new MaterialNode();
	static public var materialOpacity:MaterialNode = new MaterialNode();
	static public var materialSpecular:MaterialNode = new MaterialNode();
	static public var materialSpecularStrength:MaterialNode = new MaterialNode();
	static public var materialReflectivity:MaterialNode = new MaterialNode();
	static public var materialRoughness:MaterialNode = new MaterialNode();
	static public var materialMetalness:MaterialNode = new MaterialNode();
	static public var materialNormal:MaterialNode = new MaterialNode();
	static public var materialClearcoat:MaterialNode = new MaterialNode();
	static public var materialClearcoatRoughness:MaterialNode = new MaterialNode();
	static public var materialClearcoatNormal:MaterialNode = new MaterialNode();
	static public var materialRotation:MaterialNode = new MaterialNode();
	static public var materialSheen:MaterialNode = new MaterialNode();
	static public var materialSheenRoughness:MaterialNode = new MaterialNode();
	static public var materialIridescence:MaterialNode = new MaterialNode();
	static public var materialIridescenceIOR:MaterialNode = new MaterialNode();
	static public var materialIridescenceThickness:MaterialNode = new MaterialNode();
	static public var materialLineScale:MaterialNode = new MaterialNode();
	static public var materialLineDashSize:MaterialNode = new MaterialNode();
	static public var materialLineGapSize:MaterialNode = new MaterialNode();
	static public var materialLineWidth:MaterialNode = new MaterialNode();
	static public var materialLineDashOffset:MaterialNode = new MaterialNode();
	static public var materialPointWidth:MaterialNode = new MaterialNode();
	static public var materialAnisotropy:MaterialNode = new MaterialNode();
	static public var materialAnisotropyVector:MaterialNode = new MaterialNode();
	static public var materialReference:MaterialReferenceNode = new MaterialReferenceNode();
	static public var rendererReference:RendererReferenceNode = new RendererReferenceNode();
	static public var morphReference:MorphNode = new MorphNode();
	static public var textureBicubic:TextureBicubicNode = new TextureBicubicNode();
	static public var modelDirection:ModelNode = new ModelNode();
	static public var modelViewMatrix:ModelNode = new ModelNode();
	static public var modelNormalMatrix:ModelNode = new ModelNode();
	static public var modelWorldMatrix:ModelNode = new ModelNode();
	static public var modelPosition:ModelNode = new ModelNode();
	static public var modelViewPosition:ModelNode = new ModelNode();
	static public var modelScale:ModelNode = new ModelNode();
	static public var modelViewProjection:ModelViewProjectionNode = new ModelViewProjectionNode();
	static public var objectDirection:Object3DNode = new Object3DNode();
	static public var objectViewMatrix:Object3DNode = new Object3DNode();
	static public var objectNormalMatrix:Object3DNode = new Object3DNode();
	static public var objectWorldMatrix:Object3DNode = new Object3DNode();
	static public var objectPosition:Object3DNode = new Object3DNode();
	static public var objectScale:Object3DNode = new Object3DNode();
	static public var objectViewPosition:Object3DNode = new Object3DNode();
	static public var pointUV:PointUVNode = new PointUVNode();
	static public var positionGeometry:PositionNode = new PositionNode();
	static public var positionLocal:PositionNode = new PositionNode();
	static public var positionWorld:PositionNode = new PositionNode();
	static public var positionWorldDirection:PositionNode = new PositionNode();
	static public var positionView:PositionNode = new PositionNode();
	static public var positionViewDirection:PositionNode = new PositionNode();
	static public var reference:ReferenceNode = new ReferenceNode();
	static public var referenceBuffer:ReferenceNode = new ReferenceNode();
	static public var reflectVector:ReflectVectorNode = new ReflectVectorNode();
	static public var skinning:SkinningNode = new SkinningNode();
	static public var backgroundBlurriness:SceneNode = new SceneNode();
	static public var backgroundIntensity:SceneNode = new SceneNode();
	static public var storage:StorageBufferNode = new StorageBufferNode();
	static public var storageObject:StorageBufferNode = new StorageBufferNode();
	static public var texture:TextureNode = new TextureNode();
	static public var textureLoad:TextureNode = new TextureNode();
	// static public var textureLevel:TextureNode = new TextureNode();
	static public var sampler:TextureNode = new TextureNode();
	static public var textureStore:TextureStoreNode = new TextureStoreNode();
	static public var uv:UVNode = new UVNode();
	static public var userData:UserDataNode = new UserDataNode();
	static public var checker:CheckerNode = new CheckerNode();
	static public var BRDF_GGX:BRDF_GGX = new BRDF_GGX();
	static public var BRDF_Lambert:BRDF_Lambert = new BRDF_Lambert();
	static public var D_GGX:D_GGX = new D_GGX();
	static public var DFGApprox:DFGApprox = new DFGApprox();
	static public var F_Schlick:F_Schlick = new F_Schlick();
	static public var Schlick_to_F0:Schlick_to_F0 = new Schlick_to_F0();
	static public var V_GGX_SmithCorrelated:V_GGX_SmithCorrelated = new V_GGX_SmithCorrelated();
	static public var getGeometryRoughness:GetGeometryRoughness = new GetGeometryRoughness();
	static public var getRoughness:GetRoughness = new GetRoughness();
	static public var PhongLightingModel:PhongLightingModel = new PhongLightingModel();
	static public var PhysicalLightingModel:PhysicalLightingModel = new PhysicalLightingModel();

	static public var PI:Float = Math.PI;
	static public var PI2:Float = Math.PI * 2.0;
	static public var EPSILON:Float = 0.0001;
	static public var INFINITY:Float = Math.POSITIVE_INFINITY;
	static public var radians:MathNode = new MathNode();
	static public var degrees:MathNode = new MathNode();
	static public var exp:MathNode = new MathNode();
	static public var exp2:MathNode = new MathNode();
	static public var log:MathNode = new MathNode();
	static public var log2:MathNode = new MathNode();
	static public var sqrt:MathNode = new MathNode();
	static public var inverseSqrt:MathNode = new MathNode();
	static public var floor:MathNode = new MathNode();
	static public var ceil:MathNode = new MathNode();
	static public var normalize:MathNode = new MathNode();
	static public var fract:MathNode = new MathNode();
	static public var sin:MathNode = new MathNode();
	static public var cos:MathNode = new MathNode();
	static public var tan:MathNode = new MathNode();
	static public var asin:MathNode = new MathNode();
	static public var acos:MathNode = new MathNode();
	static public var atan:MathNode = new MathNode();
	static public var abs:MathNode = new MathNode();
	static public var sign:MathNode = new MathNode();
	static public var length:MathNode = new MathNode();
	static public var lengthSq:MathNode = new MathNode();
	static public var negate:MathNode = new MathNode();
	static public var oneMinus:MathNode = new MathNode();
	static public var dFdx:MathNode = new MathNode();
	static public var dFdy:MathNode = new MathNode();
	static public var round:MathNode = new MathNode();
	static public var reciprocal:MathNode = new MathNode();
	static public var trunc:MathNode = new MathNode();
	static public var fwidth:MathNode = new MathNode();
	static public var bitcast:MathNode = new MathNode();
	static public var atan2:MathNode = new MathNode();
	static public var min:MathNode = new MathNode();
	static public var max:MathNode = new MathNode();
	static public var mod:MathNode = new MathNode();
	static public var step:MathNode = new MathNode();
	static public var reflect:MathNode = new MathNode();
	static public var distance:MathNode = new MathNode();
	static public var difference:MathNode = new MathNode();
	static public var dot:MathNode = new MathNode();
	static public var cross:MathNode = new MathNode();
	static public var pow:MathNode = new MathNode();
	static public var pow2:MathNode = new MathNode();
	static public var pow3:MathNode = new MathNode();
	static public var pow4:MathNode = new MathNode();
	static public var transformDirection:MathNode = new MathNode();
	static public var mix:MathNode = new MathNode();
	static public var clamp:MathNode = new MathNode();
	static public var saturate:MathNode = new MathNode();
	static public var refract:MathNode = new MathNode();
	static public var smoothstep:MathNode = new MathNode();
	static public var faceForward:MathNode = new MathNode();
	static public var cbrt:MathNode = new MathNode();
	static public var all:MathNode = new MathNode();
	static public var any:MathNode = new MathNode();
	static public var equals:MathNode = new MathNode();
	static public var add:OperatorNode = new OperatorNode();
	static public var sub:OperatorNode = new OperatorNode();
	static public var mul:OperatorNode = new OperatorNode();
	static public var div:OperatorNode = new OperatorNode();
	static public var remainder:OperatorNode = new OperatorNode();
	static public var equal:OperatorNode = new OperatorNode();
	static public var lessThan:OperatorNode = new OperatorNode();
	static public var greaterThan:OperatorNode = new OperatorNode();
	static public var lessThanEqual:OperatorNode = new OperatorNode();
	static public var greaterThanEqual:OperatorNode = new OperatorNode();
	static public var and:OperatorNode = new OperatorNode();
	static public var or:OperatorNode = new OperatorNode();
	static public var not:OperatorNode = new OperatorNode();
	static public var xor:OperatorNode = new OperatorNode();
	static public var bitAnd:OperatorNode = new OperatorNode();
	static public var bitNot:OperatorNode = new OperatorNode();
	static public var bitOr:OperatorNode = new OperatorNode();
	static public var bitXor:OperatorNode = new OperatorNode();
	static public var shiftLeft:OperatorNode = new OperatorNode();
	static public var shiftRight:OperatorNode = new OperatorNode();
	static public var cond:CondNode = new CondNode();
	static public var hash:HashNode = new HashNode();
	static public var parabola:MathUtils = new MathUtils();
	static public var gain:MathUtils = new MathUtils();
	static public var pcurve:MathUtils = new MathUtils();
	static public var sinc:MathUtils = new MathUtils();
	static public var triNoise3D:TriNoise3D = new TriNoise3D();
	static public var ArrayElementNode:ArrayElementNode = new ArrayElementNode();
	static public var ConvertNode:ConvertNode = new ConvertNode();
	static public var JoinNode:JoinNode = new JoinNode();
	static public var MatcapUVNode:MatcapUVNode = new MatcapUVNode();
	static public var OscNode:OscNode = new OscNode();
	static public var PackingNode:PackingNode = new PackingNode();
	static public var RemapNode:RemapNode = new RemapNode();
	static public var RotateUVNode:RotateUVNode = new RotateUVNode();
	static public var RotateNode:RotateNode = new RotateNode();
	static public var SetNode:SetNode = new SetNode();
	static public var SplitNode:SplitNode = new SplitNode();
	static public var SpriteSheetUVNode:SpriteSheetUVNode = new SpriteSheetUVNode();
	static public var StorageArrayElementNode:StorageArrayElementNode = new StorageArrayElementNode();
	static public var TimerNode:TimerNode = new TimerNode();
	static public var TriplanarTexturesNode:TriplanarTexturesNode = new TriplanarTexturesNode();
	static public var ReflectorNode:ReflectorNode = new ReflectorNode();
	static public var ShaderNode:ShaderNode = new ShaderNode();
	static public var TBNViewMatrix:AccessorsUtils = new AccessorsUtils();
	static public var parallaxDirection:AccessorsUtils = new AccessorsUtils();
	static public var parallaxUV:AccessorsUtils = new AccessorsUtils();
	static public var transformedBentNormalView:AccessorsUtils = new AccessorsUtils();
	static public var BitangentNode:BitangentNode = new BitangentNode();
	static public var BufferAttributeNode:BufferAttributeNode = new BufferAttributeNode();
	static public var BufferNode:BufferNode = new BufferNode();
	static public var CameraNode:CameraNode = new CameraNode();
	static public var VertexColorNode:VertexColorNode = new VertexColorNode();
	static public var CubeTextureNode:CubeTextureNode = new CubeTextureNode();
	static public var InstanceNode:InstanceNode = new InstanceNode();
	static public var BatchNode:BatchNode = new BatchNode();
	static public var MaterialNode:MaterialNode = new MaterialNode();
	static public var MaterialReferenceNode:MaterialReferenceNode = new MaterialReferenceNode();
	static public var RendererReferenceNode:RendererReferenceNode = new RendererReferenceNode();
	static public var MorphNode:MorphNode = new MorphNode();
	static public var TextureBicubicNode:TextureBicubicNode = new TextureBicubicNode();
	static public var ModelNode:ModelNode = new ModelNode();
	static public var ModelViewProjectionNode:ModelViewProjectionNode = new ModelViewProjectionNode();
	static public var NormalNode:NormalNode = new NormalNode();
	static public var Object3DNode:Object3DNode = new Object3DNode();
	static public var PointUVNode:PointUVNode = new PointUVNode();
	static public var PositionNode:PositionNode = new PositionNode();
	static public var ReferenceNode:ReferenceNode = new ReferenceNode();
	static public var ReflectVectorNode:ReflectVectorNode = new ReflectVectorNode();
	static public var SkinningNode:SkinningNode = new SkinningNode();
	static public var SceneNode:SceneNode = new SceneNode();
	static public var StorageBufferNode:StorageBufferNode = new StorageBufferNode();
	static public var TangentNode:TangentNode = new TangentNode();
	static public var TextureNode:TextureNode = new TextureNode();
	static public var TextureStoreNode:TextureStoreNode = new TextureStoreNode();
	static public var UVNode:UVNode = new UVNode();
	static public var UserDataNode:UserDataNode = new UserDataNode();
	static public var BlendModeNode:BlendModeNode = new BlendModeNode();
	static public var BumpMapNode:BumpMapNode = new BumpMapNode();
	static public var ColorAdjustmentNode:ColorAdjustmentNode = new ColorAdjustmentNode();
	static public var ColorSpaceNode:ColorSpaceNode = new ColorSpaceNode();
	static public var FrontFacingNode:FrontFacingNode = new FrontFacingNode();
	static public var NormalMapNode:NormalMapNode = new NormalMapNode();
	static public var PosterizeNode:PosterizeNode = new PosterizeNode();
	static public var ToneMappingNode:ToneMappingNode = new ToneMappingNode();
	static public var ViewportNode:ViewportNode = new ViewportNode();
	static public var ViewportTextureNode:ViewportTextureNode = new ViewportTextureNode();
	static public var ViewportSharedTextureNode:ViewportSharedTextureNode = new ViewportSharedTextureNode();
	static public var ViewportDepthTextureNode:ViewportDepthTextureNode = new ViewportDepthTextureNode();
	static public var ViewportDepthNode:ViewportDepthNode = new ViewportDepthNode();
	static public var GaussianBlurNode:GaussianBlurNode = new GaussianBlurNode();
	static public var AfterImageNode:AfterImageNode = new AfterImageNode();
	static public var AnamorphicNode:AnamorphicNode = new AnamorphicNode();
	static public var PassNode:PassNode = new PassNode();
	static public var ExpressionNode:ExpressionNode = new ExpressionNode();
	static public var CodeNode:CodeNode = new CodeNode();
	static public var FunctionCallNode:FunctionCallNode = new FunctionCallNode();
	static public var FunctionNode:FunctionNode = new FunctionNode();
	static public var ScriptableNode:ScriptableNode = new ScriptableNode();
	static public var ScriptableValueNode:ScriptableValueNode = new ScriptableValueNode();
	static public var FogNode:FogNode = new FogNode();
	static public var FogRangeNode:FogRangeNode = new FogRangeNode();
	static public var FogExp2Node:FogExp2Node = new FogExp2Node();
	static public var RangeNode:RangeNode = new RangeNode();
	static public var ComputeNode:ComputeNode = new ComputeNode();
	static public var LightNode:LightNode = new LightNode();
	static public var PointLightNode:PointLightNode = new PointLightNode();
	static public var DirectionalLightNode:DirectionalLightNode = new DirectionalLightNode();
	static public var SpotLightNode:SpotLightNode = new SpotLightNode();
	static public var IESSpotLightNode:IESSpotLightNode = new IESSpotLightNode();
	static public var AmbientLightNode:AmbientLightNode = new AmbientLightNode();
	static public var LightsNode:LightsNode = new LightsNode();
	static public var LightingNode:LightingNode = new LightingNode();
	static public var LightingContextNode:LightingContextNode = new LightingContextNode();
	static public var HemisphereLightNode:HemisphereLightNode = new HemisphereLightNode();
	static public var EnvironmentNode:EnvironmentNode = new EnvironmentNode();
	static public var IrradianceNode:IrradianceNode = new IrradianceNode();
	static public var AONode:AONode = new AONode();
	static public var AnalyticLightNode:AnalyticLightNode = new AnalyticLightNode();
	static public var PMREMNode:PMREMNode = new PMREMNode();
	static public var PMREMUtils:PMREMUtils = new PMREMUtils();
	static public var CheckerNode:CheckerNode = new CheckerNode();
	static public var NodeLoader:NodeLoader = new NodeLoader();
	static public var NodeObjectLoader:NodeObjectLoader = new NodeObjectLoader();
	static public var NodeMaterialLoader:NodeMaterialLoader = new NodeMaterialLoader();
	static public var GLSLNodeParser:GLSLNodeParser = new GLSLNodeParser();
	static public var Materials:Materials = new Materials();
	static public var MaterialXNodes:MaterialXNodes = new MaterialXNodes();
	static public var getDistanceAttenuation:LightUtils = new LightUtils();

	public function new() {}
}